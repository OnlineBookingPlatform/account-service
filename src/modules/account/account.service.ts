/* eslint-disable prettier/prettier */
import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import { DTO_RQ_Account } from './account.dto';
import * as argon2 from 'argon2';
import { Account } from './account.schema';
import { Model } from 'mongoose';
import { InjectModel } from '@nestjs/mongoose';

@Injectable()
export class AccountService {
  constructor(
    @InjectModel(Account.name) private accountModel: Model<Account>,
  ) { }

  async createAccount(data: DTO_RQ_Account): Promise<Account> {
    // Log request (·∫©n th√¥ng tin nh·∫°y c·∫£m)
    console.log('üì• Received request:', { 
        ...data, 
        password: '***',
        _id: data._id || 'auto-generated' 
    });

    try {
        // 1. Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingAccount = await this.accountModel.findOne({ username: data.username }).lean();
        if (existingAccount) {
            throw new HttpException('T√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i', HttpStatus.BAD_REQUEST);
        }

        // 2. Hash password
        const hashedPassword = await argon2.hash(data.password);

        // 3. Chu·∫©n b·ªã d·ªØ li·ªáu t√†i kho·∫£n m·ªõi (lo·∫°i b·ªè _id n·∫øu c√≥)
        const accountData = {
            ...data,
            password: hashedPassword,
            account_type: 'BMS',
            _id: undefined // ƒê·∫£m b·∫£o MongoDB s·∫Ω t·ª± sinh ID
        };
        delete accountData._id; // X√≥a tr∆∞·ªùng _id n·∫øu t·ªìn t·∫°i

        // 4. T·∫°o v√† l∆∞u t√†i kho·∫£n m·ªõi
        const newAccount = new this.accountModel(accountData);
        const savedAccount = await newAccount.save();

        // 5. Log k·∫øt qu·∫£ (kh√¥ng bao g·ªìm th√¥ng tin nh·∫°y c·∫£m)
        console.log('‚úÖ Account created successfully:', {
            _id: savedAccount._id,
            username: savedAccount.username,
            account_type: savedAccount.account_type
        });

        // 6. Tr·∫£ v·ªÅ th√¥ng tin t√†i kho·∫£n (ƒë√£ convert th√†nh plain object)
        return savedAccount.toObject() as Account;

    } catch (error) {
        console.error('‚ùå Account creation failed:', error);

        // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
        if (error instanceof HttpException) {
            throw error; // Gi·ªØ nguy√™n c√°c l·ªói ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        }

        if (error.name === 'ValidationError') {
            throw new HttpException(
                'D·ªØ li·ªáu t√†i kho·∫£n kh√¥ng h·ª£p l·ªá: ' + error.message,
                HttpStatus.BAD_REQUEST
            );
        }

        throw new HttpException(
            'L·ªói h·ªá th·ªëng khi t·∫°o t√†i kho·∫£n',
            HttpStatus.INTERNAL_SERVER_ERROR
        );
    }
}
  async getAccountInfo(id: string): Promise<Account> {
    console.log('üì• Received request:', id);
    const account = await this.accountModel.findById(id);
    if (!account) {
      throw new HttpException('Account not found', HttpStatus.NOT_FOUND);
    }
    return account;
  }

  async updateAccountInfo(id: string, data: DTO_RQ_Account): Promise<Account> {
    console.log('üì• Received request ID:', id);
    console.log('üì• Received request Data:', data);
    const account = await this.accountModel.findById(id);
    if (!account) {
      throw new HttpException('Account not found', HttpStatus.NOT_FOUND);
    }
    account.set(data);
    await account.save();
    return account;
  }

  async updateAvatarAccount(id: string, url_avatar: string): Promise<Account> {
    console.log('üì• Received request ID:', id);
    console.log('üì• Received request URL Avatar:', url_avatar);
    const account = await this.accountModel.findById(id);
    if (!account) {
      throw new HttpException('Account not found', HttpStatus.NOT_FOUND);
    }
    // account.url_avatar = url_avatar;
    account.set(url_avatar);
    await account.save();
    console.log('‚úÖ Updated account:', account);
    return account;
  }

  async getAllAccountByCompany(id: number): Promise<Account[]> {
    console.log('üì• Received request:', id);
    const accounts = await this.accountModel.find({ company_id: id });
    return accounts;
  }
  async deleteAccount(id: string): Promise<void> {
    console.log('üì• Received request:', id);
    const account = await this.accountModel.findById(id);
    if (!account) {
      throw new HttpException('D·ªØ li·ªáu t√†i kho·∫£n kh√¥ng t·ªìn t·∫°i', HttpStatus.NOT_FOUND);
    }
    await account.deleteOne();
  }
}
